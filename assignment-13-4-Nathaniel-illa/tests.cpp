// Test definitions. Do NOT edit this file!
#define CATCH_CONFIG_MAIN // defines main() automatically
#include <iostream>
#include "catch.hpp"
#include "main.hpp"
TEST_CASE("Ex1 ", "[example]")
{
	Stack s(20);

	for (int i = 0; i < 10; i++)
		s.push(i);
	s.printAll();
	cout << "Total size of the stack is: " << s.getSize() << endl;
	cout << "Top element is: " << s.topEl() << endl;

	REQUIRE(s.topEl() == 9);
	int i = 9;
	while (!s.isEmpty())
	{
		int val = s.pop();
		cout << " Poped value " << val << "\t";
		REQUIRE(val == i);
		i--;
	}
	cout << endl;
}

TEST_CASE("Ex2 ", "[reverse_string]")
{
	string str = "Hello, World!";
	reverse_string(str);
	cout << "Reversed string: " << str << endl;
	REQUIRE(str == "!dlroW ,olleH");
}

TEST_CASE("Ex3 ", "[check_parentheses]")
{
	string exp1 = "{('A':30), ('B':20), ('C':10), [1,2,3,4], [6,7,8],{a,b,c}, {1,2,3,4,5}}";
	string exp2 = "DOB_list = sorted([list(map(int, f)) for f in [dob.split('-') for dob in [person['DOB'] for person in people_dict]]])";
	string exp3 = "((([]{}{{{{{{((((({{{{}}})))))}}}}}})))";
	string exp4 = "((([]{}{{{{((((({{{{}}})))))}}}}}})))";
	// Your Return values should be:
	// Expression 1: true
	// Expression 2: true
	// Expression 3: false
	cout << "Your return values: " << endl;
	int ret;
	cout << "Expression 1: " << (ret = check_parentheses(exp1)) << endl;
	cout << "Expression 2: " << (ret = check_parentheses(exp2)) << endl;
	cout << "Expression 1: " << exp1 << endl;
	cout << "Expression 2: " << exp2 << endl;
	cout << "Expression 3: " << (ret = check_parentheses(exp3)) << endl;
	cout << "Expression 3:\n" << exp3 << endl;
	for(int i=0; i<ret;i++)
		cout << ' ';
	cout << '^' << endl;
	cout << "Expression 4: " << (ret = check_parentheses(exp4)) << endl;
	cout << "Expression 4:\n" << exp4 << endl;
	for(int i=0; i<ret;i++)
		cout << ' ';
	cout << '^' << endl;
	REQUIRE(check_parentheses(exp1) == 0);
	REQUIRE(check_parentheses(exp2) == 0);
	REQUIRE(check_parentheses(exp3) == 25);
	REQUIRE(check_parentheses(exp4) == 23);
}